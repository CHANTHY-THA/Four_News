// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Categories {
  ID  Int  @id  @default(autoincrement())
  name  String
  description  String? @db.Text
  status Int @default(1)
  created_by String
  updated_by String?
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  news News[]
}
model Tags {
  ID  Int  @id  @default(autoincrement())
  name  String
  status Int @default(1)
  created_by String
  updated_by String?
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  articleTag NewsTags[]
}
model NewsTags {
  ID  Int  @id  @default(autoincrement())
  newsId Int
  tagId Int
  status Int @default(1)
  created_by String
  updated_by String?
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  new News @relation(fields: [newsId], references: [ID])
  tag Tags @relation(fields: [tagId], references: [ID])
}
model Authors {
  ID  Int  @id  @default(autoincrement())
  username  String
  biography String?
  status Int @default(1)
  created_by String
  updated_by String?
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  news News[]
}
model News {
  ID  Int  @id  @default(autoincrement())
  categoryId Int
  authorId Int
  userId Int
  title  String
  image  String
  short_description  String? @db.Text
  content String? @db.Text
  status Int @default(1)
  created_by String
  updated_by String?
  publish_date DateTime @default(now())
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  category Categories @relation(fields: [categoryId], references: [ID])
  author Authors @relation(fields: [authorId], references: [ID])
  user Users @relation(fields: [userId], references: [ID])
  articleTag NewsTags[]
}

model Users {
  ID  Int  @id  @default(autoincrement())
  username  String
  password String
  profile String?
  role String
  status Int @default(1)
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  news News[]
}
